package config

// * -----------------------------------------------------------
// *
// * Auto-Generated by gson-api-generator on 2015-12-09 00:28:46.337663061 -0400 EDT
// *
// *
// * -----------------------------------------------------------

import (
	"strings"

	log "github.com/Sirupsen/logrus"
	"github.com/obieq/gas"
)

// Config for the ms-crypto web service
var Config *config

func init() {
	log.Println("calling ms-crypto.config.init()")
	Config = newConfig()
}

type config struct {
	gas.Config
	Version               string
	Environment           string
	Port                  int
	GsonApiUrl            string
	NewRelicKey           string
	LogglyKey             string
	SSLCertSimpleHttpText string
	Debug                 bool
	PCConnections         map[string]*PolicyCenterConfig
	InfluxDBConnections   map[string]*InfluxDBConfig
	PayPlans              map[string][]string
	AncillaryAPIRoot      string
}

func newConfig() *config {
	c := &config{}
	c.PCConnections = map[string]*PolicyCenterConfig{}
	c.InfluxDBConnections = map[string]*InfluxDBConfig{}

	c.ParseConfigFile("config")
	c.Validate()

	return c
}

func (c *config) ParseConfigFile(configFileName string) error {
	err := c.Load("ms-crypto", "config", true)

	// get Version
	c.Version = gas.GetString("version")

	// get Environment
	c.Environment = gas.GetString("environment")

	// get Port
	c.Port = gas.GetInt("port")

	// get GsonApiUrl
	c.GsonApiUrl = gas.GetString("gson_api_url")

	// get NewRelic Key
	c.NewRelicKey = gas.GetString("new_relic_key")

	// get Loggly Key
	c.LogglyKey = gas.GetString("loggly_key")

	// get SSLCertSimpleHttpText
	c.SSLCertSimpleHttpText = gas.GetString("ssl_cert_simple_http_text")

	// gen ancillary api root
	c.AncillaryAPIRoot = gas.GetString(c.Environment + ".ancillary_api_root")

	// get pay plans
	c.PayPlans = map[string][]string{}
	c.PayPlans["il"] = strings.Split(gas.GetString("il_pay_plans"), ",")
	c.PayPlans["in"] = strings.Split(gas.GetString("in_pay_plans"), ",")
	c.PayPlans["md"] = strings.Split(gas.GetString("md_pay_plans"), ",")
	c.PayPlans["tn"] = strings.Split(gas.GetString("tn_pay_plans"), ",")
	c.PayPlans["tx"] = strings.Split(gas.GetString("tx_pay_plans"), ",")
	c.PayPlans["va"] = strings.Split(gas.GetString("va_pay_plans"), ",")

	// parse policy center connections
	c.loadPolicyCenter()

	// parse influx db connections
	c.loadInfluxDB()

	// get Debug flag
	c.Debug = gas.GetBool("debug")

	// print values
	log.Info("(config) ENV: " + c.Environment)
	log.Info("(config) AncillaryAPIRoot: " + c.AncillaryAPIRoot)

	return err
}

func (c *config) Validate() {
	// PANICS
	if c.Version == "" {
		log.Panic("ms-crypto config error: Version cannot be blank")
	}
	if c.Environment == "" {
		log.Panic("ms-crypto config error: Environment cannot be blank")
	}
	if c.Port == 0 {
		log.Panic("ms-crypto config error: Port cannot be blank")
	}
	if c.GsonApiUrl == "" {
		log.Panic("ms-crypto config error: Gson Api Url cannot be blank")
	}
	if c.AncillaryAPIRoot == "" {
		log.Panic("ms-crypto config error: AncillaryAPIRoot cannot be blank")
	}
	if len(c.PayPlans["il"]) == 0 {
		log.Panic("ms-crypto config error: Illinois pay plans cannot be blank")
	}
	if len(c.PayPlans["in"]) == 0 {
		log.Panic("ms-crypto config error: Indiana pay plans cannot be blank")
	}
	if len(c.PayPlans["md"]) == 0 {
		log.Panic("ms-crypto config error: Maryland pay plans cannot be blank")
	}
	if len(c.PayPlans["tn"]) == 0 {
		log.Panic("ms-crypto config error: Tennessee pay plans cannot be blank")
	}
	if len(c.PayPlans["tx"]) == 0 {
		log.Panic("ms-crypto config error: Texas pay plans cannot be blank")
	}
	if len(c.PayPlans["va"]) == 0 {
		log.Panic("ms-crypto config error: Virginia pay plans cannot be blank")
	}

	// WARNINGS
	if c.NewRelicKey == "" {
		log.Warn("\n\n-- WARNING -- (config) NewRelicKey is blank\n\n ")
	}
	if c.LogglyKey == "" {
		log.Warn("\n\n-- WARNING -- (config) Loggly is blank\n\n ")
	}
	if gas.GetString("prefix_table_name") == "" {
		log.Warn("\n\n-- WARNING -- (config) PrefixTableName is blank\n\n ")
	}
	if c.SSLCertSimpleHttpText == "" {
		log.Warn("\n\n-- WARNING -- (config) SSLCertSimpleHttpText is blank\n\n ")
	}
}
